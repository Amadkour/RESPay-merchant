// Mocks generated by Mockito 5.3.2 from annotations
// in res_pay/test/more/promotions/view/promotions_page_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;

import 'package:bloc/bloc.dart' as _i8;
import 'package:flutter/material.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:res_pay_merchant/features/dashboard/modules/more/modules/promotions/controller/promotions_cubit.dart'
    as _i3;
import 'package:res_pay_merchant/features/dashboard/modules/more/modules/promotions/provider/repo/promotions_repo.dart'
    as _i4;
import 'package:res_pay_merchant/features/e_commerce/modules/cart/provider/models/promotions_model.dart'
    as _i5;
import 'package:res_pay_merchant/features/e_commerce/provider/models/filter_item.dart'
    as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeTextEditingController_0 extends _i1.SmartFake
    implements _i2.TextEditingController {
  _FakeTextEditingController_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePromotionsState_1 extends _i1.SmartFake
    implements _i3.PromotionsState {
  _FakePromotionsState_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [PromotionsCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockPromotionsCubit extends _i1.Mock implements _i3.PromotionsCubit {
  MockPromotionsCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set promotionsRepo(_i4.PromotionsRepo? _promotionsRepo) => super.noSuchMethod(
        Invocation.setter(
          #promotionsRepo,
          _promotionsRepo,
        ),
        returnValueForMissingStub: null,
      );
  @override
  List<_i5.SinglePromotion> get filteredPromotions => (super.noSuchMethod(
        Invocation.getter(#filteredPromotions),
        returnValue: <_i5.SinglePromotion>[],
      ) as List<_i5.SinglePromotion>);
  @override
  set filteredPromotions(List<_i5.SinglePromotion>? _filteredPromotions) =>
      super.noSuchMethod(
        Invocation.setter(
          #filteredPromotions,
          _filteredPromotions,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i2.TextEditingController get searchBarController => (super.noSuchMethod(
        Invocation.getter(#searchBarController),
        returnValue: _FakeTextEditingController_0(
          this,
          Invocation.getter(#searchBarController),
        ),
      ) as _i2.TextEditingController);
  @override
  set searchBarController(_i2.TextEditingController? _searchBarController) =>
      super.noSuchMethod(
        Invocation.setter(
          #searchBarController,
          _searchBarController,
        ),
        returnValueForMissingStub: null,
      );
  @override
  List<_i6.FilterItem> get filters => (super.noSuchMethod(
        Invocation.getter(#filters),
        returnValue: <_i6.FilterItem>[],
      ) as List<_i6.FilterItem>);
  @override
  set filters(List<_i6.FilterItem>? _filters) => super.noSuchMethod(
        Invocation.setter(
          #filters,
          _filters,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set promotionsModel(_i5.PromotionsModel? _promotionsModel) =>
      super.noSuchMethod(
        Invocation.setter(
          #promotionsModel,
          _promotionsModel,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i3.PromotionsState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakePromotionsState_1(
          this,
          Invocation.getter(#state),
        ),
      ) as _i3.PromotionsState);
  @override
  _i7.Stream<_i3.PromotionsState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i7.Stream<_i3.PromotionsState>.empty(),
      ) as _i7.Stream<_i3.PromotionsState>);
  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);
  @override
  void filter(String? value) => super.noSuchMethod(
        Invocation.method(
          #filter,
          [value],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void resetSearchBar() => super.noSuchMethod(
        Invocation.method(
          #resetSearchBar,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i7.Future<void> getPromotions() => (super.noSuchMethod(
        Invocation.method(
          #getPromotions,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);
  @override
  void resetState() => super.noSuchMethod(
        Invocation.method(
          #resetState,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void emit(_i3.PromotionsState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onChange(_i8.Change<_i3.PromotionsState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i7.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);
}
