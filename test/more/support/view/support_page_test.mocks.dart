// Mocks generated by Mockito 5.3.2 from annotations
// in res_pay/test/more/support/view/support_page_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:bloc/bloc.dart' as _i6;
import 'package:flutter/material.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:res_pay_merchant/features/dashboard/modules/more/modules/support/controller/support_cubit.dart'
    as _i3;
import 'package:res_pay_merchant/features/dashboard/modules/more/modules/support/provider/repo/support_repo.dart'
    as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeTextEditingController_0 extends _i1.SmartFake
    implements _i2.TextEditingController {
  _FakeTextEditingController_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFocusNode_1 extends _i1.SmartFake implements _i2.FocusNode {
  _FakeFocusNode_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({_i2.DiagnosticLevel? minLevel = _i2.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeGlobalKey_2<T extends _i2.State<_i2.StatefulWidget>>
    extends _i1.SmartFake implements _i2.GlobalKey<T> {
  _FakeGlobalKey_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSupportState_3 extends _i1.SmartFake implements _i3.SupportState {
  _FakeSupportState_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [SupportCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockSupportCubit extends _i1.Mock implements _i3.SupportCubit {
  MockSupportCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set supportRepository(_i4.SupportRepository? _supportRepository) =>
      super.noSuchMethod(
        Invocation.setter(
          #supportRepository,
          _supportRepository,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i2.TextEditingController get supportController => (super.noSuchMethod(
        Invocation.getter(#supportController),
        returnValue: _FakeTextEditingController_0(
          this,
          Invocation.getter(#supportController),
        ),
      ) as _i2.TextEditingController);
  @override
  set supportController(_i2.TextEditingController? _supportController) =>
      super.noSuchMethod(
        Invocation.setter(
          #supportController,
          _supportController,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i2.TextEditingController get firstNameController => (super.noSuchMethod(
        Invocation.getter(#firstNameController),
        returnValue: _FakeTextEditingController_0(
          this,
          Invocation.getter(#firstNameController),
        ),
      ) as _i2.TextEditingController);
  @override
  set firstNameController(_i2.TextEditingController? _firstNameController) =>
      super.noSuchMethod(
        Invocation.setter(
          #firstNameController,
          _firstNameController,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i2.TextEditingController get emailController => (super.noSuchMethod(
        Invocation.getter(#emailController),
        returnValue: _FakeTextEditingController_0(
          this,
          Invocation.getter(#emailController),
        ),
      ) as _i2.TextEditingController);
  @override
  set emailController(_i2.TextEditingController? _emailController) =>
      super.noSuchMethod(
        Invocation.setter(
          #emailController,
          _emailController,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set errorMessage(String? _errorMessage) => super.noSuchMethod(
        Invocation.setter(
          #errorMessage,
          _errorMessage,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i2.FocusNode get firstNameFocus => (super.noSuchMethod(
        Invocation.getter(#firstNameFocus),
        returnValue: _FakeFocusNode_1(
          this,
          Invocation.getter(#firstNameFocus),
        ),
      ) as _i2.FocusNode);
  @override
  set firstNameFocus(_i2.FocusNode? _firstNameFocus) => super.noSuchMethod(
        Invocation.setter(
          #firstNameFocus,
          _firstNameFocus,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i2.FocusNode get supportNameFocus => (super.noSuchMethod(
        Invocation.getter(#supportNameFocus),
        returnValue: _FakeFocusNode_1(
          this,
          Invocation.getter(#supportNameFocus),
        ),
      ) as _i2.FocusNode);
  @override
  set supportNameFocus(_i2.FocusNode? _supportNameFocus) => super.noSuchMethod(
        Invocation.setter(
          #supportNameFocus,
          _supportNameFocus,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i2.FocusNode get emailFocus => (super.noSuchMethod(
        Invocation.getter(#emailFocus),
        returnValue: _FakeFocusNode_1(
          this,
          Invocation.getter(#emailFocus),
        ),
      ) as _i2.FocusNode);
  @override
  set emailFocus(_i2.FocusNode? _emailFocus) => super.noSuchMethod(
        Invocation.setter(
          #emailFocus,
          _emailFocus,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i2.GlobalKey<_i2.FormState> get supportValidationFormKey =>
      (super.noSuchMethod(
        Invocation.getter(#supportValidationFormKey),
        returnValue: _FakeGlobalKey_2<_i2.FormState>(
          this,
          Invocation.getter(#supportValidationFormKey),
        ),
      ) as _i2.GlobalKey<_i2.FormState>);
  @override
  set supportValidationFormKey(
          _i2.GlobalKey<_i2.FormState>? _supportValidationFormKey) =>
      super.noSuchMethod(
        Invocation.setter(
          #supportValidationFormKey,
          _supportValidationFormKey,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i3.SupportState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeSupportState_3(
          this,
          Invocation.getter(#state),
        ),
      ) as _i3.SupportState);
  @override
  _i5.Stream<_i3.SupportState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i5.Stream<_i3.SupportState>.empty(),
      ) as _i5.Stream<_i3.SupportState>);
  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);
  @override
  void updateState() => super.noSuchMethod(
        Invocation.method(
          #updateState,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void setCurrentFormKey(_i2.GlobalKey<_i2.FormState>? value) =>
      super.noSuchMethod(
        Invocation.method(
          #setCurrentFormKey,
          [value],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void reset() => super.noSuchMethod(
        Invocation.method(
          #reset,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i5.Future<void> sendIssue() => (super.noSuchMethod(
        Invocation.method(
          #sendIssue,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  void resetSupportState() => super.noSuchMethod(
        Invocation.method(
          #resetSupportState,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool supportDataEnabledButton() => (super.noSuchMethod(
        Invocation.method(
          #supportDataEnabledButton,
          [],
        ),
        returnValue: false,
      ) as bool);
  @override
  void emit(_i3.SupportState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onChange(_i6.Change<_i3.SupportState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i5.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}
