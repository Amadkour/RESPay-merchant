// Mocks generated by Mockito 5.3.2 from annotations
// in res_pay/test/authentcation/forget_password/view/foget_ui_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:ui' as _i5;

import 'package:bloc/bloc.dart' as _i6;
import 'package:flutter/material.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:res_pay_merchant/features/authentication/modules/forget_password/controller/create_new_password/create_new_password_cubit.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeTextEditingController_0 extends _i1.SmartFake
    implements _i2.TextEditingController {
  _FakeTextEditingController_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFocusNode_1 extends _i1.SmartFake implements _i2.FocusNode {
  _FakeFocusNode_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({_i2.DiagnosticLevel? minLevel = _i2.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeGlobalKey_2<T extends _i2.State<_i2.StatefulWidget>>
    extends _i1.SmartFake implements _i2.GlobalKey<T> {
  _FakeGlobalKey_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCreateNewPasswordState_3 extends _i1.SmartFake
    implements _i3.CreateNewPasswordState {
  _FakeCreateNewPasswordState_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [CreateNewPasswordCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockCreateNewPasswordCubit extends _i1.Mock
    implements _i3.CreateNewPasswordCubit {
  MockCreateNewPasswordCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Map<String, dynamic> get map => (super.noSuchMethod(
        Invocation.getter(#map),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);
  @override
  _i2.TextEditingController get createController => (super.noSuchMethod(
        Invocation.getter(#createController),
        returnValue: _FakeTextEditingController_0(
          this,
          Invocation.getter(#createController),
        ),
      ) as _i2.TextEditingController);
  @override
  _i2.TextEditingController get confirmController => (super.noSuchMethod(
        Invocation.getter(#confirmController),
        returnValue: _FakeTextEditingController_0(
          this,
          Invocation.getter(#confirmController),
        ),
      ) as _i2.TextEditingController);
  @override
  _i2.FocusNode get confirmFocusNode => (super.noSuchMethod(
        Invocation.getter(#confirmFocusNode),
        returnValue: _FakeFocusNode_1(
          this,
          Invocation.getter(#confirmFocusNode),
        ),
      ) as _i2.FocusNode);
  @override
  _i2.FocusNode get createFocusNode => (super.noSuchMethod(
        Invocation.getter(#createFocusNode),
        returnValue: _FakeFocusNode_1(
          this,
          Invocation.getter(#createFocusNode),
        ),
      ) as _i2.FocusNode);
  @override
  _i2.GlobalKey<_i2.FormState> get formKey => (super.noSuchMethod(
        Invocation.getter(#formKey),
        returnValue: _FakeGlobalKey_2<_i2.FormState>(
          this,
          Invocation.getter(#formKey),
        ),
      ) as _i2.GlobalKey<_i2.FormState>);
  @override
  set formKey(_i2.GlobalKey<_i2.FormState>? _formKey) => super.noSuchMethod(
        Invocation.setter(
          #formKey,
          _formKey,
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool get createSecureText => (super.noSuchMethod(
        Invocation.getter(#createSecureText),
        returnValue: false,
      ) as bool);
  @override
  set createSecureText(bool? _createSecureText) => super.noSuchMethod(
        Invocation.setter(
          #createSecureText,
          _createSecureText,
        ),
        returnValueForMissingStub: null,
      );
  @override
  String get createPasswordError => (super.noSuchMethod(
        Invocation.getter(#createPasswordError),
        returnValue: '',
      ) as String);
  @override
  set createPasswordError(String? _createPasswordError) => super.noSuchMethod(
        Invocation.setter(
          #createPasswordError,
          _createPasswordError,
        ),
        returnValueForMissingStub: null,
      );
  @override
  String get confirmPasswordError => (super.noSuchMethod(
        Invocation.getter(#confirmPasswordError),
        returnValue: '',
      ) as String);
  @override
  set confirmPasswordError(String? _confirmPasswordError) => super.noSuchMethod(
        Invocation.setter(
          #confirmPasswordError,
          _confirmPasswordError,
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool get isEnable => (super.noSuchMethod(
        Invocation.getter(#isEnable),
        returnValue: false,
      ) as bool);
  @override
  _i3.CreateNewPasswordState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeCreateNewPasswordState_3(
          this,
          Invocation.getter(#state),
        ),
      ) as _i3.CreateNewPasswordState);
  @override
  _i4.Stream<_i3.CreateNewPasswordState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i4.Stream<_i3.CreateNewPasswordState>.empty(),
      ) as _i4.Stream<_i3.CreateNewPasswordState>);
  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);
  @override
  void changeCreateSecureText() => super.noSuchMethod(
        Invocation.method(
          #changeCreateSecureText,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void updateScreen() => super.noSuchMethod(
        Invocation.method(
          #updateScreen,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i4.Future<String> onTabButton({required _i5.VoidCallback? onSuccess}) =>
      (super.noSuchMethod(
        Invocation.method(
          #onTabButton,
          [],
          {#onSuccess: onSuccess},
        ),
        returnValue: _i4.Future<String>.value(''),
      ) as _i4.Future<String>);
  @override
  void emit(_i3.CreateNewPasswordState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onChange(_i6.Change<_i3.CreateNewPasswordState>? change) =>
      super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i4.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}
