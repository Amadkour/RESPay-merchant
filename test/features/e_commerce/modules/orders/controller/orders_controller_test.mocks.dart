// Mocks generated by Mockito 5.3.2 from annotations
// in res_pay/test/features/e_commerce/modules/orders/controller/orders_controller_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:res_pay_merchant/core/errors/failures.dart' as _i5;
import 'package:res_pay_merchant/core/res/utils/parse_model/parent_model.dart' as _i6;
import 'package:res_pay_merchant/features/e_commerce/modules/orders/provider/model/complain_order_inputs.dart'
    as _i8;
import 'package:res_pay_merchant/features/e_commerce/modules/orders/provider/model/order_model.dart'
    as _i7;
import 'package:res_pay_merchant/features/e_commerce/modules/orders/provider/repo/orders_repo.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeOption_1<A> extends _i1.SmartFake implements _i2.Option<A> {
  _FakeOption_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [OrdersRepo].
///
/// See the documentation for Mockito's code generation for more information.
class MockOrdersRepo extends _i1.Mock implements _i3.OrdersRepo {
  MockOrdersRepo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.ParentModel>> get() =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.ParentModel>>.value(
            _FakeEither_0<_i5.Failure, _i6.ParentModel>(
          this,
          Invocation.method(
            #get,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.ParentModel>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, _i7.OrderModel>> trackOrder(
          String? uuid) =>
      (super.noSuchMethod(
        Invocation.method(
          #trackOrder,
          [uuid],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i7.OrderModel>>.value(
            _FakeEither_0<_i5.Failure, _i7.OrderModel>(
          this,
          Invocation.method(
            #trackOrder,
            [uuid],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i7.OrderModel>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.ParentModel>> buyAgain(String? uuid) =>
      (super.noSuchMethod(
        Invocation.method(
          #buyAgain,
          [uuid],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.ParentModel>>.value(
            _FakeEither_0<_i5.Failure, _i6.ParentModel>(
          this,
          Invocation.method(
            #buyAgain,
            [uuid],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.ParentModel>>);
  @override
  _i4.Future<_i2.Option<_i5.Failure>> cancel({
    required String? description,
    required String? orderUUID,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #cancel,
          [],
          {
            #description: description,
            #orderUUID: orderUUID,
          },
        ),
        returnValue: _i4.Future<_i2.Option<_i5.Failure>>.value(
            _FakeOption_1<_i5.Failure>(
          this,
          Invocation.method(
            #cancel,
            [],
            {
              #description: description,
              #orderUUID: orderUUID,
            },
          ),
        )),
      ) as _i4.Future<_i2.Option<_i5.Failure>>);
  @override
  _i4.Future<_i2.Option<_i5.Failure>> complain(
          _i8.ComplainOrderInput? inputs) =>
      (super.noSuchMethod(
        Invocation.method(
          #complain,
          [inputs],
        ),
        returnValue: _i4.Future<_i2.Option<_i5.Failure>>.value(
            _FakeOption_1<_i5.Failure>(
          this,
          Invocation.method(
            #complain,
            [inputs],
          ),
        )),
      ) as _i4.Future<_i2.Option<_i5.Failure>>);
}
