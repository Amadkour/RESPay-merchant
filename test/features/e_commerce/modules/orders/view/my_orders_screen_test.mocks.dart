// Mocks generated by Mockito 5.3.2 from annotations
// in res_pay/test/features/e_commerce/modules/orders/view/my_orders_screen_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:bloc/bloc.dart' as _i8;
import 'package:flutter/material.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:res_pay_merchant/features/e_commerce/modules/cart/provider/models/cart_model.dart'
    as _i7;
import 'package:res_pay_merchant/features/e_commerce/modules/orders/controller/orders_cubit.dart'
    as _i5;
import 'package:res_pay_merchant/features/e_commerce/modules/orders/provider/model/order_list_model.dart'
    as _i3;
import 'package:res_pay_merchant/features/e_commerce/modules/orders/provider/model/order_model.dart'
    as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeTextEditingController_0 extends _i1.SmartFake
    implements _i2.TextEditingController {
  _FakeTextEditingController_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeOrderListModel_1 extends _i1.SmartFake
    implements _i3.OrderListModel {
  _FakeOrderListModel_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeOrderModel_2 extends _i1.SmartFake implements _i4.OrderModel {
  _FakeOrderModel_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeOrdersState_3 extends _i1.SmartFake implements _i5.OrdersState {
  _FakeOrdersState_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [OrdersCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockOrdersCubit extends _i1.Mock implements _i5.OrdersCubit {
  MockOrdersCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.TextEditingController get searchBarController => (super.noSuchMethod(
        Invocation.getter(#searchBarController),
        returnValue: _FakeTextEditingController_0(
          this,
          Invocation.getter(#searchBarController),
        ),
      ) as _i2.TextEditingController);
  @override
  set searchBarController(_i2.TextEditingController? _searchBarController) =>
      super.noSuchMethod(
        Invocation.setter(
          #searchBarController,
          _searchBarController,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i3.OrderListModel get model => (super.noSuchMethod(
        Invocation.getter(#model),
        returnValue: _FakeOrderListModel_1(
          this,
          Invocation.getter(#model),
        ),
      ) as _i3.OrderListModel);
  @override
  set model(_i3.OrderListModel? _model) => super.noSuchMethod(
        Invocation.setter(
          #model,
          _model,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i4.OrderModel get order => (super.noSuchMethod(
        Invocation.getter(#order),
        returnValue: _FakeOrderModel_2(
          this,
          Invocation.getter(#order),
        ),
      ) as _i4.OrderModel);
  @override
  set order(_i4.OrderModel? _order) => super.noSuchMethod(
        Invocation.setter(
          #order,
          _order,
        ),
        returnValueForMissingStub: null,
      );
  @override
  List<String> get complainFiles => (super.noSuchMethod(
        Invocation.getter(#complainFiles),
        returnValue: <String>[],
      ) as List<String>);
  @override
  set complainFiles(List<String>? _complainFiles) => super.noSuchMethod(
        Invocation.setter(
          #complainFiles,
          _complainFiles,
        ),
        returnValueForMissingStub: null,
      );
  @override
  String get cancelReason => (super.noSuchMethod(
        Invocation.getter(#cancelReason),
        returnValue: '',
      ) as String);
  @override
  set cancelReason(String? _cancelReason) => super.noSuchMethod(
        Invocation.setter(
          #cancelReason,
          _cancelReason,
        ),
        returnValueForMissingStub: null,
      );
  @override
  String get complainReason => (super.noSuchMethod(
        Invocation.getter(#complainReason),
        returnValue: '',
      ) as String);
  @override
  set complainReason(String? _complainReason) => super.noSuchMethod(
        Invocation.setter(
          #complainReason,
          _complainReason,
        ),
        returnValueForMissingStub: null,
      );
  @override
  String get complainReasonType => (super.noSuchMethod(
        Invocation.getter(#complainReasonType),
        returnValue: '',
      ) as String);
  @override
  set complainReasonType(String? _complainReasonType) => super.noSuchMethod(
        Invocation.setter(
          #complainReasonType,
          _complainReasonType,
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool get showOrdersFilters => (super.noSuchMethod(
        Invocation.getter(#showOrdersFilters),
        returnValue: false,
      ) as bool);
  @override
  set showOrdersFilters(bool? _showOrdersFilters) => super.noSuchMethod(
        Invocation.setter(
          #showOrdersFilters,
          _showOrdersFilters,
        ),
        returnValueForMissingStub: null,
      );
  @override
  String get query => (super.noSuchMethod(
        Invocation.getter(#query),
        returnValue: '',
      ) as String);
  @override
  set query(String? _query) => super.noSuchMethod(
        Invocation.setter(
          #query,
          _query,
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool get isOrderProcessing => (super.noSuchMethod(
        Invocation.getter(#isOrderProcessing),
        returnValue: false,
      ) as bool);
  @override
  bool get orderCompleted => (super.noSuchMethod(
        Invocation.getter(#orderCompleted),
        returnValue: false,
      ) as bool);
  @override
  bool get orderShipped => (super.noSuchMethod(
        Invocation.getter(#orderShipped),
        returnValue: false,
      ) as bool);
  @override
  set filterStatus(String? status) => super.noSuchMethod(
        Invocation.setter(
          #filterStatus,
          status,
        ),
        returnValueForMissingStub: null,
      );
  @override
  List<_i4.OrderModel> get orders => (super.noSuchMethod(
        Invocation.getter(#orders),
        returnValue: <_i4.OrderModel>[],
      ) as List<_i4.OrderModel>);
  @override
  _i5.OrdersState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeOrdersState_3(
          this,
          Invocation.getter(#state),
        ),
      ) as _i5.OrdersState);
  @override
  _i6.Stream<_i5.OrdersState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i6.Stream<_i5.OrdersState>.empty(),
      ) as _i6.Stream<_i5.OrdersState>);
  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);
  @override
  void resetSearchBar() => super.noSuchMethod(
        Invocation.method(
          #resetSearchBar,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i6.Future<void> getOrders() => (super.noSuchMethod(
        Invocation.method(
          #getOrders,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  _i6.Future<void> track(_i4.OrderModel? order) => (super.noSuchMethod(
        Invocation.method(
          #track,
          [order],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  _i6.Future<_i7.CartModel?> buyAgain(String? uuid) => (super.noSuchMethod(
        Invocation.method(
          #buyAgain,
          [uuid],
        ),
        returnValue: _i6.Future<_i7.CartModel?>.value(),
      ) as _i6.Future<_i7.CartModel?>);
  @override
  _i6.Future<void> cancelOrder() => (super.noSuchMethod(
        Invocation.method(
          #cancelOrder,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  _i6.Future<void> complain() => (super.noSuchMethod(
        Invocation.method(
          #complain,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  _i6.Future<void> addImage(int? index) => (super.noSuchMethod(
        Invocation.method(
          #addImage,
          [index],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  void removeImages(int? index) => super.noSuchMethod(
        Invocation.method(
          #removeImages,
          [index],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void search(String? query) => super.noSuchMethod(
        Invocation.method(
          #search,
          [query],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onCancelReasonChanged(String? value) => super.noSuchMethod(
        Invocation.method(
          #onCancelReasonChanged,
          [value],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void emit(_i5.OrdersState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onChange(_i8.Change<_i5.OrdersState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i6.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
}
