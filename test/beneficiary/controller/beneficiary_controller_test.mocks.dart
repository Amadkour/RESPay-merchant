// Mocks generated by Mockito 5.3.2 from annotations
// in res_pay/test/beneficiary/controller/beneficiary_controller_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:res_pay_merchant/core/errors/failures.dart' as _i5;
import 'package:res_pay_merchant/core/public_module/provider/repos/currency_repo.dart'
    as _i8;
import 'package:res_pay_merchant/core/res/utils/parse_model/parent_model.dart' as _i6;
import 'package:res_pay_merchant/features/payment/modules/transfer/provider/model/beneficary_model.dart'
    as _i7;
import 'package:res_pay_merchant/features/payment/modules/transfer/provider/repos/beneficiary/beneficiary_repo.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [BeneficiaryRemoteRepo].
///
/// See the documentation for Mockito's code generation for more information.
class MockBeneficiaryRemoteRepo extends _i1.Mock
    implements _i3.BeneficiaryRemoteRepo {
  MockBeneficiaryRemoteRepo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.ParentModel>>
      addNewTransferBeneficiary({required Map<String, dynamic>? inputs}) =>
          (super.noSuchMethod(
            Invocation.method(
              #addNewTransferBeneficiary,
              [],
              {#inputs: inputs},
            ),
            returnValue:
                _i4.Future<_i2.Either<_i5.Failure, _i6.ParentModel>>.value(
                    _FakeEither_0<_i5.Failure, _i6.ParentModel>(
              this,
              Invocation.method(
                #addNewTransferBeneficiary,
                [],
                {#inputs: inputs},
              ),
            )),
          ) as _i4.Future<_i2.Either<_i5.Failure, _i6.ParentModel>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.ParentModel>> getBeneficiary(
          {String? method}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getBeneficiary,
          [],
          {#method: method},
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.ParentModel>>.value(
            _FakeEither_0<_i5.Failure, _i6.ParentModel>(
          this,
          Invocation.method(
            #getBeneficiary,
            [],
            {#method: method},
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.ParentModel>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.ParentModel>> favouriteToggle(
          {String? beneficiaryUUiD}) =>
      (super.noSuchMethod(
        Invocation.method(
          #favouriteToggle,
          [],
          {#beneficiaryUUiD: beneficiaryUUiD},
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.ParentModel>>.value(
            _FakeEither_0<_i5.Failure, _i6.ParentModel>(
          this,
          Invocation.method(
            #favouriteToggle,
            [],
            {#beneficiaryUUiD: beneficiaryUUiD},
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.ParentModel>>);
  @override
  _i4.Future<
      _i2.Either<_i5.Failure, List<_i7.BeneficiariesModel>>> deleteBeneficiry(
          {required String? uuid}) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteBeneficiry,
          [],
          {#uuid: uuid},
        ),
        returnValue: _i4.Future<
                _i2.Either<_i5.Failure, List<_i7.BeneficiariesModel>>>.value(
            _FakeEither_0<_i5.Failure, List<_i7.BeneficiariesModel>>(
          this,
          Invocation.method(
            #deleteBeneficiry,
            [],
            {#uuid: uuid},
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<_i7.BeneficiariesModel>>>);
}

/// A class which mocks [CurrencyRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockCurrencyRepository extends _i1.Mock
    implements _i8.CurrencyRepository {
  MockCurrencyRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.ParentModel>> getCurrencies() =>
      (super.noSuchMethod(
        Invocation.method(
          #getCurrencies,
          [],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.ParentModel>>.value(
            _FakeEither_0<_i5.Failure, _i6.ParentModel>(
          this,
          Invocation.method(
            #getCurrencies,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.ParentModel>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.ParentModel>> getCountries() =>
      (super.noSuchMethod(
        Invocation.method(
          #getCountries,
          [],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.ParentModel>>.value(
            _FakeEither_0<_i5.Failure, _i6.ParentModel>(
          this,
          Invocation.method(
            #getCountries,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.ParentModel>>);
}
